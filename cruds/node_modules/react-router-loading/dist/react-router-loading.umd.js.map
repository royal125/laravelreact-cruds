{"version":3,"file":"react-router-loading.umd.js","sources":["../lib/LoadingContext.ts","../../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../../node_modules/react/jsx-runtime.js","../react/jsx-runtime","../lib/Route.tsx","../lib/_DefaultLoadingScreen.tsx","../lib/utils.ts","../lib/_RouteWrapper.tsx","../lib/_LoadingRoutes.tsx","../lib/_LoadingMiddleware.tsx","../lib/Routes.tsx","../lib/index.ts"],"sourcesContent":["import { createContext } from 'react';\n\n// Interface\n\nexport interface LoadingContextActions {\n  start: () => void;\n  done: () => void;\n  restart: () => void;\n}\n\n// Actions\n\nconst LoadingContext = createContext<LoadingContextActions>({\n  start: () => { },\n  done: () => { },\n  restart: () => { }\n});\nLoadingContext.displayName = 'LoadingContext';\n\n// Value\n\nconst LoadingGetterContext = createContext<boolean>(false);\nLoadingGetterContext.displayName = 'LoadingGetterContext';\n\nexport {\n  LoadingContext,\n  LoadingGetterContext\n};\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import * as jsxRuntime from \"/Users/victor/Projects/own/react-router-loading/node_modules/react/jsx-runtime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import React, { FC } from 'react';\nimport { Route as OriginalRoute, RouteProps as OriginalRouteProps } from 'react-router';\n\ntype RouteProps = OriginalRouteProps & {\n  loading?: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Route: FC<RouteProps> = ({ loading, ...props }) => <OriginalRoute {...props} />;\n\nexport default Route;\n","import React, { FC } from 'react';\n\nconst DefaultLoadingScreen: FC = () =>\n  <div\n    style={{\n      position: 'fixed',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'white'\n    }}\n  />;\n\nexport default DefaultLoadingScreen;\n","import React from 'react';\nimport { matchRoutes, RouteObject, Location } from 'react-router';\n\nexport type LoadingRouteObject = RouteObject & {\n  loading?: boolean;\n}\n\n// adapted from original createRoutesFromChildren\n// https://github.com/remix-run/react-router/blob/main/packages/react-router/lib/components.tsx\nexport function createRoutesFromChildren(children: React.ReactNode): LoadingRouteObject[] {\n  const routes: LoadingRouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      // eslint-disable-next-line prefer-spread\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    const route: LoadingRouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      loading: element.props.loading,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\nexport const isPathsDifferent = (first: Location, second: Location) =>\n  first.pathname !== second.pathname;\n\nexport const isPathsEqual = (first: Location, second: Location) =>\n  first.pathname === second.pathname;\n\nexport const isSearchDifferent = (first: Location, second: Location) =>\n  first.search !== second.search;\n\nexport const isLoadable = (location: Location, routes: LoadingRouteObject[]) => {\n  const matches = matchRoutes(routes, location);\n\n  if (!matches || matches.length === 0)\n    return false;\n\n  const lastMatch = matches[matches.length - 1];\n  return (lastMatch.route as LoadingRouteObject).loading;\n};\n","/* eslint-disable camelcase */\nimport React, { useMemo, FC } from 'react';\nimport { Location, NavigationType, UNSAFE_LocationContext, useRoutes } from 'react-router';\nimport { LoadingRouteObject } from './utils';\n\ninterface RouteWrapperProps {\n  routes: LoadingRouteObject[];\n  location: Location;\n  navigationType: NavigationType;\n  hidden?: boolean;\n}\n\nexport const RouteWrapper: FC<RouteWrapperProps> = ({ routes, location, navigationType, hidden }) => {\n  const element = useRoutes(routes, location);\n\n  return <div style={hidden ? { display: 'none' } : undefined}>\n    {useMemo(\n      () => <UNSAFE_LocationContext.Provider value={{ location, navigationType }}>\n        {element}\n      </UNSAFE_LocationContext.Provider>,\n      [location]\n    )}\n  </div>;\n};\n","\nimport React, { useState, useContext, useEffect, useMemo, useRef, PropsWithChildren, FC } from 'react';\nimport { useLocation, Location, useNavigationType, NavigationType } from 'react-router';\nimport { LoadingContext, LoadingGetterContext } from './LoadingContext';\nimport DefaultLoadingScreen from './_DefaultLoadingScreen';\nimport { createRoutesFromChildren, isLoadable, isPathsDifferent, isPathsEqual, isSearchDifferent } from './utils';\nimport { RouteWrapper } from './_RouteWrapper';\n\ninterface LoadingRoutesProps {\n  loadingScreen?: React.ElementType;\n  maxLoadingTime?: number;\n}\n\ninterface LoadingRoutesState {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LOADING_PATHNAME = '__loading';\n\nconst LoadingRoutes: FC<PropsWithChildren<LoadingRoutesProps>> = ({\n  children,\n  loadingScreen: LoadingScreen,\n  maxLoadingTime = 0\n}) => {\n\n  // 🪝 Hooks\n  const location = useLocation();\n  const navigationType = useNavigationType();\n  const loadingContext = useContext(LoadingContext);\n  const isCurrentlyLoading = useContext(LoadingGetterContext);\n\n  // 🗄 State\n  const routes = useMemo(\n    () => createRoutesFromChildren(children),\n    [children]\n  );\n\n  const [current, setCurrent] = useState<LoadingRoutesState>(() => {\n    const isFirstPageLoadable = isLoadable(location, routes);\n\n    // if first page loadable showing loading screen\n    const firstLocation = isFirstPageLoadable\n      ? { ...location, pathname: LOADING_PATHNAME }\n      : location;\n\n    return {\n      location: firstLocation,\n      navigationType: navigationType\n    };\n  });\n  const [next, setNext] = useState<LoadingRoutesState>(current);\n\n  const timeout: React.MutableRefObject<NodeJS.Timeout | undefined> = useRef();\n\n  // 🔄 Lifecycle\n  // when location was changed\n  useEffect(() => {\n    // if not the same route mount it to start loading\n    if (isPathsDifferent(location, next.location)) {\n      const isPageLoadable = isLoadable(location, routes);\n\n      setNext({\n        location: { ...location },\n        navigationType\n      });\n\n      if (!isPageLoadable) {\n        loadingContext.done();\n        setCurrent({\n          location: { ...location },\n          navigationType\n        });\n      } else {\n        if (!isCurrentlyLoading)\n          loadingContext.start();\n        else\n          loadingContext.restart();\n      }\n    }\n\n    // if same as the current location stop loading\n    if (isPathsEqual(location, current.location)) {\n      loadingContext.done();\n\n      if (isSearchDifferent(location, current.location))\n        setCurrent({\n          location: { ...location },\n          navigationType\n        });\n    }\n  }, [location]);\n\n  // when loading is done\n  useEffect(() => {\n    if (!isCurrentlyLoading && isPathsDifferent(current.location, next.location))\n      setCurrent(next);\n  }, [isCurrentlyLoading]);\n\n  // setTimeout if maxLoadingTime is provided\n  useEffect(() => {\n    if (maxLoadingTime > 0) {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n        timeout.current = undefined;\n      }\n\n      if (isPathsDifferent(current.location, next.location)) {\n        timeout.current = setTimeout(() => {\n          loadingContext.done();\n        }, maxLoadingTime);\n      }\n    }\n  }, [current, next]);\n\n  // memo current and next components\n  return useMemo(\n    () => <>\n      {/* current */}\n      {\n        current.location.pathname !== LOADING_PATHNAME\n          ? <RouteWrapper\n            key={current.location.pathname}\n            routes={routes}\n            location={current.location}\n            navigationType={current.navigationType}\n          />\n          : LoadingScreen\n            ? <LoadingScreen />\n            : <DefaultLoadingScreen />\n      }\n\n      {/* hidden next */}\n      {\n        isPathsDifferent(current.location, next.location) &&\n        <RouteWrapper\n          key={next.location.pathname}\n          routes={routes}\n          location={next.location}\n          navigationType={next.navigationType}\n          hidden\n        />\n      }\n    </>,\n    [current, next]\n  );\n};\n\nexport default LoadingRoutes;\n","import React, { useState, useMemo, useCallback, useEffect, useRef, FC, PropsWithChildren } from 'react';\nimport { LoadingContext, LoadingGetterContext } from './LoadingContext';\nimport { topbar } from '.';\n\nconst LoadingMiddleware: FC<PropsWithChildren<{ isLoading?: boolean }>> = ({ children, isLoading = false }) => {\n  const [loading, setLoading] = useState(isLoading);\n  const isFirstRender = useRef(true);\n\n  const start = useCallback(() => {\n    topbar.show();\n    setLoading(true);\n  }, []);\n\n  const done = useCallback(() => {\n    topbar.hide();\n    setLoading(false);\n  }, []);\n\n  const restart = useCallback(() => {\n    topbar.hide();\n    topbar.show();\n  }, []);\n\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      if (isLoading && !loading)\n        start();\n      else if (loading)\n        done();\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [isLoading]);\n\n  const loadingProvider = useMemo(\n    () => <LoadingContext.Provider value={{ start, done, restart }}>\n      {children}\n    </LoadingContext.Provider>,\n    []\n  );\n\n  return (\n    <LoadingGetterContext.Provider value={loading}>\n      {loadingProvider}\n    </LoadingGetterContext.Provider>\n  );\n};\n\nexport default LoadingMiddleware;\n","import React, { ElementType, FC, ReactNode } from 'react';\nimport LoadingRoutes from './_LoadingRoutes';\nimport LoadingMiddleware from './_LoadingMiddleware';\n\ninterface RoutesProps {\n  children: ReactNode;\n  loadingScreen?: ElementType;\n  maxLoadingTime?: number;\n  isLoading?: boolean;\n}\n\n// combine topbar and switcher\nconst Routes: FC<RoutesProps> = ({ children, loadingScreen, maxLoadingTime, isLoading }) =>\n  <LoadingMiddleware isLoading={isLoading}>\n    <LoadingRoutes loadingScreen={loadingScreen} maxLoadingTime={maxLoadingTime}>\n      {children}\n    </LoadingRoutes>\n  </LoadingMiddleware>;\n\nexport default Routes;\n","import { useContext } from 'react';\nimport { default as _topbar } from 'topbar';\nimport { LoadingContext, LoadingGetterContext } from './LoadingContext';\n\nexport { default as Route } from './Route';\nexport { default as Routes } from './Routes';\n\nexport interface TopBarConfig {\n  autoRun?: boolean;\n  barThickness?: number;\n  barColors?: Record<number, string>;\n  shadowBlur?: number;\n  shadowColor?: string;\n  className?: string;\n}\n\nexport interface TopBar {\n  show: () => void;\n  hide: () => void;\n  config: (conf: TopBarConfig) => void;\n}\n\nconst topbar: TopBar = _topbar;\n\nconst useLoadingContext = () => useContext(LoadingContext);\n\nexport {\n  topbar,\n  useLoadingContext,\n  LoadingContext,\n  LoadingGetterContext\n};\n"],"names":["createContext","require$$0","jsxRuntimeModule","jsxRuntime.jsx","jsxRuntime.jsxs","jsxRuntime.Fragment","Route","loading","props","OriginalRoute","DefaultLoadingScreen","_jsx","position","top","bottom","left","right","backgroundColor","React","matchRoutes","RouteWrapper","routes","location","navigationType","hidden","element","useRoutes","display","undefined","useMemo","UNSAFE_LocationContext","LOADING_PATHNAME","LoadingRoutes","children","loadingScreen","LoadingScreen","maxLoadingTime","useLocation","useNavigationType","loadingContext","useContext","LoadingContext","isCurrentlyLoading","LoadingGetterContext","createRoutesFromChildren","current","setCurrent","useState","isFirstPageLoadable","isLoadable","pathname","next","setNext","timeout","useRef","useEffect","isPathsDifferent","isPageLoadable","restart","start","done","isPathsEqual","isSearchDifferent","clearTimeout","setTimeout","_jsxs","_Fragment","LoadingMiddleware","isLoading","setLoading","isFirstRender","useCallback","topbar","show","hide","loadingProvider","Routes","_topbar"],"mappings":"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"}